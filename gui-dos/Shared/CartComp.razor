@inject ShoppingCart ShoppingCart
@inject NavigationManager NavMan

<MudText Typo="Typo.h4" Align="Align.Center">Indkøbskurv</MudText>
<MudDivider/>
@if (ShoppingCart.GiftBaskets.Count == 0)
{
    <MudText Align="Align.Center" Class="my-2">
        <strong>Din indkøbskurv er tom.</strong>
    </MudText>
}
else
{
    <MudList>
        @foreach (var item in ShoppingCart.GiftBaskets.Distinct())
        {
            <div class="border my-2">
                <MudListItem Dense="true"> 
                    <ChildContent>
                        <div class="d-flex justify-space-between">
                            <MudText Typo="Typo.subtitle1" Class="text-break mr-1">
                                @(ShoppingCart.GiftBaskets.Count(g => g.Equals(item)))x @item.Title
                            </MudText>
                            <MudText Typo="Typo.subtitle1" Class="text-nowrap">
                                @item.Price kr.
                            </MudText>
                        </div>
                    </ChildContent>
                    <NestedList>
                        <div class="p-2">
                            <div class="d-flex justify-space-between">
                                <MudButton StartIcon="@Icons.Outlined.ExposureNeg1" Size="Size.Small" OnClick="() => Remove(item)">
                                    Fjern én
                                </MudButton>
                                @if(ShoppingCart.GiftBaskets.Count(g => g.Equals(item)) > 1)
                                {
                                    <MudButton EndIcon="@Icons.Outlined.Delete" Size="Size.Small" OnClick="() => RemoveAllSingle(item)">
                                        Fjern alle
                                    </MudButton>
                                }
                            </div>
                            <div class="mb-2">
                                @if(item.Comment != String.Empty)
                                {
                                    <MudText Typo="Typo.subtitle2">Kommentar:</MudText>
                                    <MudText Typo="Typo.caption" Class="text-break">@item.Comment</MudText>
                                }
                                else
                                {
                                    <MudText Typo="Typo.subtitle1">Ingen kommentar tilføjet</MudText>
                                }
                            </div>
                        </div>
                    </NestedList>
                </MudListItem>
            </div>
        }
    </MudList>
    <div class="mt-auto">
        <MudDivider />
        <div class="d-flex justify-space-between my-2">
            <MudText>Total:</MudText>
            <MudText><b>@ShoppingCart.Total kr.</b></MudText>
        </div>
    </div>

    @* Order cart button *@
    @if(Buttons)
    {
        <div class="d-flex justify-space-between my-2">
            <MudButton Class="rounded-pill" Variant="Variant.Outlined" OnClick=RemoveAll>
                Tøm kurv
            </MudButton>
            <MudButton Class="rounded-pill" Variant="Variant.Outlined" OnClick=GoToCheckout>
                Gå til bestilling
            </MudButton>
        </div>
    }
}

@code
{
    [Inject] private IDialogService DialogService { get; set; }
    [Parameter] public bool Buttons { get; set; } = false;
    protected override void OnInitialized() {
        ShoppingCart.ComponentChanged += StateHasChanged;
    }
    private void GoToCheckout()
    {
        NavMan.NavigateTo("/checkout");
    }

    private void Remove(GiftBasket gb)
    {
        ShoppingCart.GiftBaskets.Remove(gb);
        ShoppingCart.CallComponentChanged();
    }
    private async void RemoveAll() 
    {
        bool? result = await DialogService.ShowMessageBox(
            "Bekræft",
            "Er du sikker på du vil fjerne alle tilføjede varer fra din kurv?",
            yesText:"Ja", noText:"Nej"
        );
        if(result == true) {
            ShoppingCart.GiftBaskets.Clear();
            ShoppingCart.CallComponentChanged();
        }
    }

    private void RemoveAllSingle(GiftBasket gb) {
        ShoppingCart.GiftBaskets.RemoveAll(p => p.Equals(gb));
        ShoppingCart.CallComponentChanged();
    }
}
