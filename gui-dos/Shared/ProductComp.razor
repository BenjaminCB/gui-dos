@inject ShoppingCart ShoppingCart

@* Product card *@
<MudPaper Width="@cardWidth" Style="position: relative;" Elevation="@elevation" Class="mud-primary d-flex flex-column m-3 border border-dark" @onmouseenter="Elevate" @onmouseleave="DeElevate">
  
    @* Product card image(s) *@
    <MudCarousel Class="rounded-top border-bottom border-dark" TData="object" AutoCycle="cycle" AutoCycleTime="cycleTime" @bind-SelectedIndex="@cycleIndex"
    ShowArrows="arrow" NavigationButtonsClass="white-text" ShowDelimiters="delim" DelimitersClass="white-text" Style="height:300px;"> 
        @* foreach over flere billeder *@
        <MudCarouselItem Transition="Transition.Fade" Class="rounded-top">
            <img src="@Product.Image" class="rounded-top" style="width:100%;height:100%;"/>
        </MudCarouselItem>
    </MudCarousel>

    @* Product card text *@
    <div class="d-flex justify-space-between m-2">
        <MudText Typo="Typo.h6" Color="Color.Tertiary" Class="text-break">
            @Product.Title
        </MudText>
        <MudText Typo="Typo.h6" Color="Color.Tertiary" Class="text-nowrap">
            @Product.Price kr.
        </MudText>
    </div>

    @* Show description on card if not in shopview *@
    @if(!ShopView)
    {
        <MudText Typo="Typo.body2" Color="Color.Tertiary" Class="text-break m-2">
            <strong>Beskrivelse: </strong>@Product.Description <br/>
            <strong>Tags: </strong>@Product.Tags
        </MudText>
    }

    @* Show shop buttons and overlay if in shopview *@
    @if(ShopView) 
    {
        @* Product card buttons *@
        <div class="d-flex justify-space-between m-2 mt-auto">
            <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" OnClick="ToggleOverlay" Class="rounded-pill">
                Se mere
            </MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" OnClick="ToggleOrder" Class="rounded-pill">
                Bestil
            </MudButton>
        </div>

        @* Product card overlay for more info *@
        <MudOverlay @bind-Visible=@overlayVisible Absolute="true" AutoClose="true" DarkBackground="true" @onmouseover=@Elevate @onmouseleave=@ToggleOverlay>
            <MudPaper Class="mud-primary border border-dark" Width="@cardWidth" Square="true">
        
                <div class="d-flex justify-space-between p-4">
                    <MudText Typo="Typo.h6" Color="Color.Tertiary" Class="text-break">
                        @Product.Title
                    </MudText>
                    <MudText Typo="Typo.h6" Color="Color.Tertiary" Class="text-nowrap">
                        @Product.Price kr.
                    </MudText>
                </div>

                <MudText Typo="Typo.body1" Color="Color.Tertiary" Class="text-break p-4">
                    @Product.Description
                </MudText>

            </MudPaper>
        </MudOverlay>
    }
</MudPaper>

@* Ordering overlay *@
<MudOverlay @bind-Visible=@orderVisible DarkBackground="true" LockScroll="true">
    <MudPaper Class="mud-primary p-3 border border-dark" MaxWidth="90vw" Width="auto">
        <div class="d-flex flex-wrap justify-center">
            @* Ordering layout product images *@
            <MudCarousel Class="rounded m-3 border border-dark" TData="object" AutoCycle="cycle" AutoCycleTime="cycleTime" @bind-SelectedIndex=@cycleIndex
             ShowArrows="arrow" NavigationButtonsClass="white-text" ShowDelimiters="delim" DelimitersClass="white-text" Style="height:350px;width:400px"> 
                <MudCarouselItem Transition="Transition.Fade" Class="rounded">
                    <img src="@Product.Image" class="rounded" style="height:100%;width:100%;"/>
                </MudCarouselItem>
            </MudCarousel>
            <div class="m-3" style="max-width:400px"> 
                <div class="mb-3">
                    @* Ordering layout product title *@
                    <MudText Typo="Typo.h5" Color="Color.Tertiary" Align="Align.Center" Class="text-break">
                        @Product.Title
                    </MudText>

                    @* Ordering layout product description *@
                    <MudText Typo="Typo.body1" Color="Color.Tertiary" Class="text-break">
                        @Product.Description
                    </MudText>
                </div>

                <MudDivider/>


                @* Ordering layout add comment *@
                <div class="mud-tertiary rounded p-2 mt-3">
                    <MudTextField T="string" Lines="3" DisableUnderLine="true" Label="Kommentar" Counter="200" MaxLength="200" Margin="Margin.Dense"
                     Placeholder="Tilføj en kommentar med specielle ønsker til din gavekurv" HelperText="Ønsker til din valgte gavekurv"
                     HelperTextOnFocus="true" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" @bind-Text=@commentInput/>
                </div>

                <div class="d-flex align-items-center justify-end mt-3">
                    <MudText Typo="Typo.h6" Color="Color.Tertiary" Align="Align.Right" Class="text-nowrap">
                        @Product.Price kr.
                    </MudText>
                    <div class="mud-tertiary rounded px-2 pb-2 ml-2" style="width:20%;">
                        <MudNumericField @bind-Value="amountInput" Min="1" Max="99" DisableUnderLine="true" Margin="Margin.Dense" 
                         Label="Antal" Style="width:inherit" MaxLength="2"/>
                    </div>
                </div>

                @* Ordering overlay buttons *@
                <div class="d-flex flex-row align-items-end justify-space-between mt-3">
                    <MudButton Class="m-2 rounded-pill" StartIcon="@Icons.Outlined.ArrowBack" IconColor="Color.Tertiary" 
                     Variant="Variant.Outlined" Color="Color.Tertiary" OnClick=@ToggleOrder>
                        Tilbage
                    </MudButton>
                    <MudButton Class="m-2 rounded-pill" EndIcon="@Icons.Outlined.AddShoppingCart" IconColor="Color.Tertiary" 
                     Variant="Variant.Outlined" Color="Color.Tertiary" OnClick=@AddToCart>
                        Tilføj til kurv
                    </MudButton>
                </div>
            </div>
        </div>
    </MudPaper>
</MudOverlay>

@code{

    [Parameter]
    public Product Product { get; set;}

    [Parameter]
    public bool ShopView { get; set; } = true;

    //Sets the width of a product card
    private static string cardWidth = "350px";

    //Sets the visibility of the product card overlay
    private bool overlayVisible = false;

    //Sets the visibility of the product ordering overlay
    private bool orderVisible = false;

    //Sets the base value of the product card 
    private int baseElevation;

    //Sets the highlighted elevation value of the product card
    private int highlightElevation;

    //Sets the elevation of the product card
    private int elevation;

    //Sets image-cycle of the product card
    private bool cycle = false;

    //Current image-cycle index of the product card
    private int cycleIndex = 0;

    //Sets visibility of arrows on the image carousel
    private bool arrow = false;

    //Sets visibility of delimiters on the image carousel
    private bool delim = false;

    //Sets the image-cycle time on the image carousel
    private TimeSpan cycleTime = TimeSpan.FromSeconds(3);

    private string commentInput = String.Empty;

    private int amountInput = 1;

    private IEnumerable<string> MaxCharacters(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 200 < ch?.Length)
            yield return "Max 200 karakterer";
    }

    private void Elevate() {
        cycle = true;
        elevation = highlightElevation;
    }

    private void DeElevate() {
        cycle = false;
        cycleIndex = 0;
        elevation = baseElevation;
    }

    private void ToggleOverlay() {
        overlayVisible = !overlayVisible;
    }

    private void ToggleOrder() {
        commentInput = String.Empty;
        amountInput = 1;
        orderVisible = !orderVisible;
    }

    private void AddToCart() {
        GiftBasket gb = new GiftBasket(Product.Title, commentInput, Product.Price);
        for(int i = 0; i < amountInput; i++) {
            ShoppingCart.GiftBaskets.Add(gb);
        }
        ShoppingCart.CallComponentChanged();
        ToggleOrder();
    }

    protected override Task OnInitializedAsync()
    {
        //if (product.Images.Count > 1) {
        //    arrow = delim = true;
        //}

        baseElevation = ShopView ? 4 : 0;
        highlightElevation = ShopView ? 24 : 0;
        elevation = baseElevation;

        return base.OnInitializedAsync();
    }
}