@page "/product/edit/{productId}"

@using gui_dos.Data
@using gui_dos.Forms
@using Microsoft.EntityFrameworkCore;

@inject IDbContextFactory<IsvaerftetDbContext> DbContextFactory
@inject NavigationManager NavMan


<AuthorizeView Context="AuthContext">
    <Authorized>
        <div class="d-flex justify-center text-center m-5">
            @if (product == null)
            {
                <div class="p-2">
                    <MudText Typo="Typo.h5">Ingen produkt med id: @ProductId</MudText>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.ArrowBack" Class="rounded-pill border border-dark" Link="/product">
                        Tilbage
                    </MudButton>
                </div>
            }
            else
            {
                <MudPaper class="p-2">
                    <MudText Typo="Typo.h5" Align="Align.Center">
                        Rediger '@product.Title'
                    </MudText>
                    <EditForm Model="@productForm" OnValidSubmit="@editProduct" Context="EditContext" style="width: 100%;">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>

                        <MudTextField @bind-Value=productForm.Title Class="mud-theme-tertiary rounded m-2" Label="Titel" Variant="Variant.Filled"/>
                        <MudTextField @bind-Value=productForm.Description Class="mud-theme-tertiary rounded m-2" Label="Beskrivelse" Variant="Variant.Filled" Lines="3"/>
                        <MudNumericField @bind-Value=productForm.Price Class="mud-theme-tertiary rounded m-2" Label="Pris" Variant="Variant.Filled" Adornment="Adornment.End" AdornmentText="kr." Min="0"/>
                        <MudTextField @bind-Value=productForm.Tags Class="mud-theme-tertiary rounded m-2" Label="Tags" Variant="Variant.Filled"/>
                        <div class="m-2">
                            <label style="font-weight: bold;">Billede(r): </label>
                            <InputFile OnChange="@fileUpload"/>
                        </div>
                        <div class="d-flex justify-space-between m-2"> 
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.ArrowBack" Class="rounded-pill border border-dark" Link="/product">
                                Tilbage
                            </MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Outlined.Save" Class="rounded-pill border border-dark">
                                Gem Ã¦ndringer
                            </MudButton>
                        </div>
                    </EditForm>
                </MudPaper>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <LoginDisplay />
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string ProductId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private Product product;
    private ProductForm productForm = new ProductForm();

    protected override async Task OnInitializedAsync()
    {
        using (var ctx = DbContextFactory.CreateDbContext())
        {
            int id = Int32.Parse(ProductId);
            product = await ctx.Products.SingleOrDefaultAsync(p => p.ProductId == id);
            if(product != null) 
            {
                productForm.Title = product.Title;
                productForm.Description = product.Description;
                productForm.Price = product.Price;
                productForm.Image = product.Image;
                productForm.Tags = product.Tags;
            }
        }
    }

    private async Task fileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        productForm.Image = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task editProduct()
    {
        string name = (await authenticationStateTask).User.Identity.Name;
        using (var ctx = DbContextFactory.CreateDbContext())
        {
            Product p = ctx.Products.Update(product).Entity;
            string changeDate = DateTime.Now.ToString();
            string changeString = String.Empty;

            if (p.Title != productForm.Title)
            {
                changeString = $"Titel fra '{p.Title}' til '{productForm.Title}'";
                p.Changelog.Add(new Change(changeDate, changeString, name));
                p.Title = productForm.Title;
            }

            if (p.Description != productForm.Description)
            {
                changeString = $"Beskrivelse fra '{p.Description}' til '{productForm.Description}'";
                p.Changelog.Add(new Change(changeDate, changeString, name));
                p.Description = productForm.Description;
            }

            if (p.Price != productForm.Price)
            {
                changeString = $"Pris fra {p.Price} kr. til {productForm.Price} kr.";
                p.Changelog.Add(new Change(changeDate, changeString, name));
                p.Price = productForm.Price;
            }

            if (p.Image != productForm.Image)
            {
                changeString = $"Nyt billede";
                p.Changelog.Add(new Change(changeDate, changeString, name));
                p.Image = productForm.Image;
            }

            if (p.Tags != productForm.Tags)
            {
                changeString = $"Tags fra '{p.Tags}' til '{productForm.Tags}'";
                p.Changelog.Add(new Change(changeDate, changeString, name));
                p.Tags = productForm.Tags;
            }

            await ctx.SaveChangesAsync();
        }
        NavMan.NavigateTo("/product");
    }
}
