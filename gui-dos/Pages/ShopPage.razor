@page "/shop"
@using System.Collections.Generic
@using Microsoft.EntityFrameworkCore
@using System.Linq
@inject IDbContextFactory<IsvaerftetDbContext> DbContextFactory
@inject ShoppingCart ShoppingCart

@* Filter/cart bar *@
<div class="d-flex justify-space-around my-4">
    @* Filter button *@
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mx-4 border border-dark"
     StartIcon="@Icons.Outlined.FilterList" OnClick="ToggleFilterDrawer" FullWidth="true">
        <MudText Typo="Typo.h6">Filter</MudText>
    </MudButton>
    @* Cart button *@
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mx-4 border border-dark"
     EndIcon="@Icons.Outlined.ShoppingCart" OnClick="ToggleCartDrawer" FullWidth="true">
        <MudBadge Content="ShoppingCart.GiftBaskets.Count" Origin="Origin.CenterLeft" Color="Color.Primary" Bordered="true" Visible="@(ShoppingCart.GiftBaskets.Count > 0)">
            <MudText Typo="Typo.h6" Class="ml-2">Kurv</MudText>
        </MudBadge>
    </MudButton>
</div>
@* Product Grid *@
<div class="d-flex justify-center flex-wrap">
    @foreach (var product in products)
    {
        @if (FilterProduct(product))
        {
            <ProductComp Product="@product"/>
        }
    }
</div>

@* Filter Drawer *@
<MudDrawer @bind-Open=@filterDrawerOpen Elevation="10" Anchor="Anchor.Start" Class="p-2"
 Variant="DrawerVariant.Temporary" ClipMode="DrawerClipMode.Always" Color="Color.Primary">
    <MudText Typo="Typo.h4" Align="Align.Center">Filter</MudText>
    <MudText Typo="Typo.h5">Pris</MudText>
    <div class="border rounded p-2 my-2">
        <MudText Typo="Typo.body1">Maks. pris: @setPrice.ToString("N2") kr.</MudText>
        <input type="range" min="@minPrice" max="@maxPrice" class="slider" step="1" @bind="setPrice" @bind:event="oninput"/>
    </div>
    <MudText Typo="Typo.h5">Præferencer</MudText>
    <div class="border rounded p-2 my-2">
        @foreach(string tag in tags.Keys) 
        {
            <MudCheckBox @bind-Checked=@tags[tag] Label="@tag"/>
        }
    </div>
</MudDrawer>

@* Cart Drawer *@
<MudDrawer @bind-Open=@cartDrawerOpen Elevation="10" Anchor="Anchor.End" Class="p-2" Width="300px"
 Variant="DrawerVariant.Temporary" ClipMode="DrawerClipMode.Always" Color="Color.Primary">
    <MudText Typo="Typo.h4" Align="Align.Center">Indkøbskurv</MudText>
    <CartComp/>
</MudDrawer>

@code 
{
    private bool filterDrawerOpen = false;
    private bool cartDrawerOpen = false;
    private double maxPrice;
    private double minPrice;
    private double setPrice;
    private List<Product> products;
    private Dictionary<string, bool> tags = new Dictionary<string, bool>();

    protected override async Task OnInitializedAsync()
    {
        ShoppingCart.ComponentChanged += StateHasChanged;
        using (var ctx = DbContextFactory.CreateDbContext())
        {
            products = await ctx.Products.ToListAsync();
        }
        if(products.Count != 0) {
            maxPrice = products.Select(p => p.Price).Max();
            minPrice = products.Select(p => p.Price).Min();
            setPrice = maxPrice;
            foreach (Product p in products)
            {
                p.Tags.Split(' ').Distinct().ToList().ForEach(delegate(string s) {
                    tags.TryAdd(s, true);
                });
            }
        }
    }

    private bool FilterProduct(Product p)
    {
        @* Price filtering *@
        if (p.Price > setPrice) return false;

        @* Tag filtering *@
        foreach (string tag in p.Tags.Split(' '))
        {
            if(!tags[tag]) return false;
        }

        return true;
    }

    private void ToggleFilterDrawer() {
        filterDrawerOpen = !filterDrawerOpen;
    }

    private void ToggleCartDrawer() {
        cartDrawerOpen = !cartDrawerOpen;
    }
}
