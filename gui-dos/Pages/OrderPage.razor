@page "/order"

@using System.Collections.Generic
@using gui_dos.Data
@using gui_dos.Models
@using Microsoft.EntityFrameworkCore;

@inject IDbContextFactory<IsvaerftetDbContext> DbContextFactory
@inject NavigationManager NavMan

<AuthorizeView Context="AuthContext">
    <Authorized>
        @* CAN'T be moved to css as '@' doesn't work in there *@
        <style>
            .ButtonActivePending {
                @($"background:{Colors.Yellow.Default}")
            }
            .ButtonActivePending:hover {
                @($"background:{Colors.Yellow.Darken1}")
            }

            .ButtonActiveAccepted {
                @($"background:{Colors.LightBlue.Default}")
            }
            .ButtonActiveAccepted:hover {
                @($"background:{Colors.LightBlue.Darken1}")
            }

            .ButtonActiveFinished {
                @($"background:{Colors.Green.Default}")
            }
            .ButtonActiveFinished:hover {
                @($"background:{Colors.Green.Darken1}")
            }
        </style>

        <MudTable Items="@orders" Hover="true" Breakpoint="Breakpoint.Xs" Dense="true" Filter="new Func<Order,bool>(FilterFunc1)" SortLabel="Sort By" Class="border border-dark my-2">
            <ToolBarContent>
                <MudText Typo="Typo.h4">Aktive Ordre</MudText>
                <MudSpacer/>
                <MudTextField @bind-Value="searchString" Placeholder="Søg" Variant="Variant.Outlined" Margin="Margin.Dense"
                 Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                <MudSpacer/>
                <MudMenu Label="Filter" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                    <div class="m-2">
                        <MudText Typo="Typo.h6">Status:</MudText>
                        <MudDivider/>
                        <MudSwitch @bind-Checked=@showPending Label="Afventer" Color="Color.Primary"/> <br/>
                        <MudSwitch @bind-Checked=@showAccepted Label="Accepteret" Color="Color.Primary"/> <br/>
                        <MudSwitch @bind-Checked=@showFinished Label="Afsluttet" Color="Color.Primary"/>
                    </div>
                </MudMenu>
            </ToolBarContent>
            @* Table header content *@
            <HeaderContent>
                <MudTh Style="width:2%">ID</MudTh>
                <MudTh Style="width:50%">Status</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Order, object>(x=>x.DateOrdered)">Oprettet</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Order, object>(x=>x.DateDeadline)">Deadline</MudTableSortLabel></MudTh>
                <MudTh Style="width:18%"><MudTableSortLabel SortBy="new Func<Order, object>(x=>x.FirstName)">Navn</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Order, object>(x=>x.Price)">Pris</MudTableSortLabel></MudTh>
                <MudTh Style="width:10%">Mere info</MudTh>
            </HeaderContent>
            @* Table row content *@
            <RowTemplate>
                <MudTd>@context.OrderId</MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.HourglassTop"
                                Size="Size.Small" class="@((context.Status == OrderStatus.Afventer ? "ButtonActivePending" : "Button"))"
                                @onclick="() => OrderChangeStatus(context, OrderStatus.Afventer)">
                        Afventer
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.CheckCircle"
                                Size="Size.Small" class="@((context.Status == OrderStatus.Accepteret ? "ButtonActiveAccepted" : "Button"))"
                                @onclick="() => OrderChangeStatus(context, OrderStatus.Accepteret)">
                        Accepteret
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Beenhere"
                                Size="Size.Small" class="@((context.Status == OrderStatus.Afsluttet ? "ButtonActiveFinished" : "Button"))"
                                @onclick="() => OrderChangeStatus(context, OrderStatus.Afsluttet)">
                        Afsluttet
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Outbox"
                                Size="Size.Small" class="@((context.Status == OrderStatus.Afhentet ? "ButtonActiveDelivered" : "Button"))"
                                @onclick="() => OrderChangeStatus(context, OrderStatus.Afhentet)">
                        Afhentet
                    </MudButton>
                </MudTd>
                <MudTd DataLabel="Oprettet">@context.DateOrdered.ToShortDateString()</MudTd>
                <MudTd DataLabel="Deadline">@context.DateDeadline.ToShortDateString()</MudTd>
                <MudTd DataLabel="Navn">@context.FirstName @context.LastName</MudTd>
                <MudTd DataLabel="Pris">@context.Price kr.</MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Info"
                                Color="Color.Transparent" Size="Size.Small" OnClick="@(() => ShowBtnPress(context.OrderId))">
                        @((context.ShowDetails == true)? "Skjul" : "Vis")
                    </MudButton>
                </MudTd>
            </RowTemplate>
            @* No results view *@
            <NoRecordsContent>
                <MudText>
                    Intet match blev fundet <br />
                    Det er muligt at søge efter: Status, Fornavn, Efternavn, OrdrerID, Telefon nr., Pris og Produktnavne<br />
                    <p class="text-muted">Disse kan/må ikke kombineres</p>
                </MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            @* Order more info view *@
            <ChildRowContent>
                @if (context.ShowDetails)
                {
                    <MudTr>
                        <td colspan="7">
                            <MudCard Elevation="0" Square="true" Class="border-bottom">
                                <MudCardContent Class="px-4">
                                    <MudGrid Justify="Justify.SpaceBetween">
                                        <MudItem xs="12" sm="4">
                                            <MudText Typo="Typo.h6" Align="Align.Center">Ordre detaljer:</MudText>
                                            <MudPaper Class="p-2">
                                                <MudText Typo="Typo.body1"><strong>Navn:</strong> @context.FirstName @context.LastName </MudText>
                                                <MudText Typo="Typo.body1"><strong>Email:</strong> @context.Email </MudText>
                                                <MudText Typo="Typo.body1"><strong>Telefon:</strong> @context.PhoneNumber</MudText>
                                                <MudText Typo="Typo.body1"><strong>Pris:</strong> @context.Price kr.</MudText>
                                                <MudText Typo="Typo.body1"><strong>Kommentar:</strong> @context.Comment</MudText>
                                                <div class="p-2 d-flex justify-space-between">
                                                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel"
                                                     Size="Size.Small" Class="mr-2" OnClick="() => OrderChangeStatus(context, OrderStatus.Afslået)">
                                                        Afvis
                                                    </MudButton>
                                                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.EditCalendar"
                                                     Size="Size.Small" Class="mr-2" OnClick="() => OrderChangeDate(context)">
                                                        Ny Dato
                                                    </MudButton>
                                                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.History" 
                                                     Size="Size.Small" OnClick="() => OrderChangelog(context)">
                                                        Historik
                                                    </MudButton>
                                                </div>
                                            </MudPaper>
                                        </MudItem>
                                        <MudItem xs="12" sm="8">
                                            <MudText Typo="Typo.h6" Align="Align.Center">
                                                Ordre indhold:
                                            </MudText>
                                            <MudTable Items="@context.GiftBaskets" Context="content" Hover="true" Breakpoint="Breakpoint.None">
                                                <HeaderContent>
                                                    <MudTh Style="width: 30%">Titel</MudTh>
                                                    <MudTh Style="width: 50%">Kommentar</MudTh>
                                                    <MudTh Style="width: 20%">Pris</MudTh>
                                                </HeaderContent>
                                                <RowTemplate>
                                                    <MudTd DataLabel="ID">@content.Title</MudTd>
                                                    <MudTd DataLabel="Kommentar">@content.Comment</MudTd>
                                                    <MudTd DataLabel="Pris">@content.Price kr.</MudTd>
                                                </RowTemplate>
                                            </MudTable>
                                        </MudItem>
                                    </MudGrid>
                                </MudCardContent>
                            </MudCard>
                        </td>
                    </MudTr>
                }
            </ChildRowContent>
        </MudTable>
    </Authorized>
    <NotAuthorized>
        <LoginDisplay />
    </NotAuthorized>
</AuthorizeView>

@code
{
    [CascadingParameter] 
    public IModalService Modal { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private string searchString = "";
    private bool FilterFunc1(Order element) => FilterFunc(element, searchString);

    private List<Order> orders;
    private string name;
    private bool showPending = true, showAccepted = true, showFinished = true;

    protected override async Task OnInitializedAsync()
    {
        using (var ctx = DbContextFactory.CreateDbContext())
        {
            orders = await ctx.Orders.Where(o => o.Status < OrderStatus.Afhentet).ToListAsync();
        }

        var user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            name = user.Identity.Name;
        }
    }

    private async Task OrderChangeStatus(Order o, OrderStatus s)
    {

        var ConfModal = Modal.Show<ConfComp>($"Vil du ændre ordre nr. {o.OrderId} fra '{o.Status}' til '{s}'?");
        //Call to popup
        var result = await ConfModal.Result;

        if (!result.Cancelled)
        {
            Change c = new Change(DateTime.Now.ToString(), $"Status ændret fra {o.Status} til {s}", name);

            using (var ctx = DbContextFactory.CreateDbContext())
            {
                Order thisOrder = ctx.Update(o).Entity;
                thisOrder.Changelog.Add(c);
                thisOrder.Status = s;
                // Insure ShowDetails isn't opes as defult, if Status changes while ShowDetails = true
                thisOrder.ShowDetails = false;
                await ctx.SaveChangesAsync();
                orders = await ctx.Orders.Where(o => o.Status < OrderStatus.Afhentet).ToListAsync();
                o.SendStatusMail();
                StateHasChanged();
            }
        }
    }

    private async Task OrderChangeDate(Order o)
    {
        var ConfModal = Modal.Show<DateComp>($"Vælg en ny leveringsdato for ordre nr. {o.OrderId}");
        DateTime DateResult = o.DateDeadline;
        DateTime StatusBeforeChange = o.DateDeadline;
        //Call to popup
        var result = await ConfModal.Result;
        if (result.Data != null)
        {
            string StringResult = result.Data.ToString();
            DateResult = DateTime.Parse(StringResult);
        }

        if (!result.Cancelled)
        {
            Change c = new Change(DateTime.Now.ToString(), $"Dato ændret fra {StatusBeforeChange.ToShortDateString()} til {DateResult.ToShortDateString()}", name);

            using (var ctx = DbContextFactory.CreateDbContext())
            {

                Order thisOrder = ctx.Update(o).Entity;
                thisOrder.Changelog.Add(c);
                thisOrder.DateDeadline = DateResult;
                // Insure ShowDetails isn't opes as defult, if Status changes while ShowDetails = true
                thisOrder.ShowDetails = false;
                await ctx.SaveChangesAsync();
                orders = await ctx.Orders.Where(o => o.Status < OrderStatus.Afhentet).ToListAsync();
                StateHasChanged();
            }
        }
    }

    private void ShowBtnPress(int nr)
    {
        Order tmpPerson = orders.First(f => f.OrderId == nr);
        tmpPerson.ShowDetails = !tmpPerson.ShowDetails;
    }

    private bool FilterFunc(Order element, string searchString)
    {
        if((showPending && element.Status == OrderStatus.Afventer) || 
           (showAccepted && element.Status == OrderStatus.Accepteret) ||
           (showFinished && element.Status == OrderStatus.Afsluttet)) 
        {    
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{element.OrderId} {element.PhoneNumber} {element.Price}".Contains(searchString))
                return true;

            foreach (GiftBasket giftBasket in element.GiftBaskets)
            {
                if (giftBasket.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                {
                    return true;
                }
            }
        }

        return false;
    }

    private void OrderChangelog(Order o)
    {
        NavMan.NavigateTo($"/order/changelog/{o.OrderId}");
    }
}
