@page "/order"

@using System.Collections.Generic
@using gui_dos.Data
@using gui_dos.Models
@using Microsoft.EntityFrameworkCore;

@inject IDbContextFactory<IsvaerftetDbContext> DbContextFactory
@inject NavigationManager NavMan

<AuthorizeView>
    <Authorized>
        @if (orders != null && orders.Count == 0)
        {
            <div>
                No products found...
            </div>
        }
        <style>
            .ButtonActive{
            background-color: #1c7430;
            }
        </style>
        @if (orders != null)
        {
            <section>
                <div>
                    <label>
                        Pending
                        <input type="checkbox" @onchange="@(() => _Toggle(OrderStatus.Pending))"/>
                    </label>
                    <label>
                        Accepted
                        <input type="checkbox" @onchange="@(() => _Toggle(OrderStatus.Accepted))"/>
                    </label>
                    <label>
                        Finished
                        <input type="checkbox" @onchange="@(() => _Toggle(OrderStatus.Finished))"/>
                    </label>
                </div>
            </section>

            @foreach (var order in orders)
            {
                @if (_Filter(order))
                {
                    <div>
                        <div>
                            <div>
                                <p>
                                    Date ordered: @order.DateOrdered.ToString()
                                    Deadline: @order.DateDeadline.ToString()
                                    Name: @order.FirstName @order.LastName
                                    Price: @order.Price
                                </p>

                                @if (orderIsShown && orderToShow.Equals(order))
                                {
                                    <p>
                                        Mail: @order.Email
                                        Tlf. nr: @order.PhoneNumber
                                        Comment: @order.Comment
                                    </p>
                                    <div>
                                        @foreach (GiftBasket giftBasket in order.GiftBaskets)
                                        {
                                            <div>
                                                <p>
                                                    Giftbasket: Det er i benjamins kode, implementer senerer.
                                                    Comment: @giftBasket.Comment
                                                    Price: @giftBasket.Price
                                                </p>
                                            </div>
                                        }
                                    </div>
                                }

                                @if (!orderIsShown || !orderToShow.Equals(order))
                                {
                                    <button @onclick="() => showOrder(order)">
                                        Show order
                                    </button>
                                }
                                else
                                {
                                    <button @onclick="() => hideOrder(order)">
                                        Hide order
                                    </button>
                                }

                                <button @onclick="() => orderChangelog(order)">
                                    Changelog
                                </button>
                            </div>
                        </div>
                        <div>
                            <button class="@((order.Status == OrderStatus.Pending ? "ButtonActive" : "Button"))" @onclick="() => OrderChangeStatus(order, OrderStatus.Pending)">Pending</button>
                            <button class="@((order.Status == OrderStatus.Accepted ? "ButtonActive" : "Button"))" @onclick="() => OrderChangeStatus(order, OrderStatus.Accepted)">Accepted</button>
                            <button class="@((order.Status == OrderStatus.Finished ? "ButtonActive" : "Button"))" @onclick="() => OrderChangeStatus(order, OrderStatus.Finished)">Finished</button>
                            <button class="@((order.Status == OrderStatus.Delivered ? "ButtonActive" : "Button"))" @onclick="() => OrderChangeStatus(order, OrderStatus.Delivered)">Delivered</button>
                        </div>
                    </div>
                }
            }
        }
        }
    </Authorized>
    <NotAuthorized>
        <LoginDisplay />
    </NotAuthorized>
</AuthorizeView>
@code
{
    private bool orderIsShown = false;
    private Order orderToShow;
    private bool pending = true, accepted = true, finished = true;
    private List<Order> orders, pendingOrders, acceptedOrders, finisedOrders;
    private List<OrderStatus> _PredicateStatuses = new List<OrderStatus>();
    private List<OrderStatus> _Statuses = new List<OrderStatus>();
    [CascadingParameter] public IModalService Modal { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private string _Name;

    protected override async Task OnInitializedAsync()
    {
        using (var ctx = DbContextFactory.CreateDbContext())
        {
            orders = await ctx.Orders.ToListAsync();
        }
        OrderByDate();

        var user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            _Name = user.Identity.Name;
        }
    }

    private void _Toggle(OrderStatus order)
    {
        if (_PredicateStatuses.Contains(order))
        {
            _PredicateStatuses.Remove(order);
        }
        else
        {
            _PredicateStatuses.Add(order);
        }
    }
    private bool _Filter(Order o)
    {
        if (_PredicateStatuses.Count == 0) return true;
        else return _PredicateStatuses.Contains(o.Status);
    }

    private async Task OrderChangeStatus(Order o, OrderStatus s)
    {
        if (o.Status >= s) return;

        var ConfModal = Modal.Show<ConfComp>("Are you sure?");
        var result = await ConfModal.Result;

        if (!result.Cancelled)
        {
            using (var ctx = DbContextFactory.CreateDbContext())
            {
                Order thisOrder = ctx.Update(o).Entity;
                thisOrder.Status = s;

                Change c = new Change()
                {
                    ChangeString = $"Update status to {s}",
                    Name = _Name,
                    Date = DateTime.Now.ToString()
                };

                o.Changelog.Add(c);

                await ctx.SaveChangesAsync();
                orders = await ctx.Orders.ToListAsync();
                OrderByDate();
            }
        }
    }

    private void OrderByDate()
    {
        IEnumerable<Order> query = orders.OrderBy(order => order.DateDeadline);
    }

    private async void ChangeSearchTerms(OrderStatus o)
    {
        switch (o)
        {
            case OrderStatus.Pending:
                pending = !pending;
                break;
            case OrderStatus.Accepted:
                accepted = !accepted;
                break;
            case OrderStatus.Finished:
                    finished = !finished;
                break;
        }
        await using (var ctx = DbContextFactory.CreateDbContext())
        {
            if (pending)
            {
                pendingOrders = await ctx.Orders.Where(t => t.Status == OrderStatus.Pending).ToListAsync();
            }
            else
            {
                pendingOrders = new List<Order>();
            }
            if (accepted)
            {
                acceptedOrders = await ctx.Orders.Where(t => t.Status == OrderStatus.Accepted).ToListAsync();
            }
            else
            {
                acceptedOrders = new List<Order>();
            }
            if (finished)
            {
                finisedOrders = await ctx.Orders.Where(t => t.Status == OrderStatus.Finished).ToListAsync();
            }
            else
            {
                finisedOrders = new List<Order>();
            }

        }
        pendingOrders.AddRange(acceptedOrders);
        pendingOrders.AddRange(finisedOrders);
        orders = pendingOrders;
    }

    private void showOrder(Order o)
    {
        orderToShow = o;
        orderIsShown = true;
    }

    private void hideOrder(Order o)
    {
        orderIsShown = false;
    }

    private void orderChangelog(Order o)
    {
        NavMan.NavigateTo($"/order/changelog/{o.OrderId}");
    }
}
