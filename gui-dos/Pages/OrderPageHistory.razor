@page "/order/history"

@using System.Collections.Generic
@using gui_dos.Data
@using Microsoft.EntityFrameworkCore;

@inject IDbContextFactory<IsvaerftetDbContext> DbContextFactory
@inject NavigationManager NavMan

<AuthorizeView Context="AuthContext">
    <Authorized>
    <MudTable Items="@oldOrders" Hover="true" Breakpoint="Breakpoint.Sm" Dense="true" Filter="new Func<Order,bool>(FilterFunc1)" SortLabel="Sort By" Class="border border-dark my-2">
        <ToolBarContent>
            <MudText Typo="Typo.h4">Ordrehistorik</MudText>
            <MudSpacer/>
            <MudTextField @bind-Value="searchString" Placeholder="Søg" Variant="Variant.Outlined" Margin="Margin.Dense" 
             Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"/>
            <MudSpacer/>
            <MudMenu Label="Filter" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" EndIcon="@Icons.Filled.FilterList">
                <div class="m-2">
                    <MudText Typo="Typo.h6">Status:</MudText>
                    <MudDivider/>
                    <MudCheckBox Dense="true" @bind-Checked=@showDelivered Label="Afhentet" Color="Color.Primary"/> <br/>
                    <MudCheckBox Dense="true" @bind-Checked=@showDeclined Label="Afslået" Color="Color.Primary"/> <br/>
                    <MudCheckBox Dense="true" @bind-Checked=@showCancelled Label="Annlueret" Color="Color.Primary"/>
                </div>
            </MudMenu>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="width:5%"><MudTableSortLabel SortBy="new Func<Order,object>(x=>x.OrderId)" >Nr.</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Order, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Order, object>(x=>x.FirstName)">Navn</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Order, object>(x=>x.DateOrdered)">Oprettet</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Order, object>(x=>x.DateDeadline)" InitialDirection="SortDirection.Descending">Deadline</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Order, object>(x=>x.Price)">Pris</MudTableSortLabel></MudTh>
            <MudTh Style="width:10%">Mere Info</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr.">@context.OrderId</MudTd>
            <MudTd DataLabel="Status">@context.Status</MudTd>
            <MudTd DataLabel="Navn">@context.FirstName @context.LastName</MudTd>
            <MudTd DataLabel="Oprettet">@context.DateOrdered.ToShortDateString()</MudTd>
            <MudTd DataLabel="Afsluttet">@context.DateDeadline.ToShortDateString()</MudTd>
            <MudTd DataLabel="Pris">@context.Price kr.</MudTd>
            <MudTd>
                <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Info" Color="Color.Transparent" Size="Size.Small" OnClick="@(() => ShowBtnPress(context.OrderId))">
                    @((context.ShowDetails == true)? "Skjul" : "Vis")
                </MudButton>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>
                Intet match var fundet <br />
                Det er muligt at søge efter: Fornavn, Efternavn, OrdrerID, Telefon nr. og Pris<br />
                <p class="text-muted">Disse kan ikke kombineres</p>
            </MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <ChildRowContent>
            @if (context.ShowDetails)
            {
                <MudTr>
                    <td colspan="7">
                        <MudCard Elevation="0">
                            <MudCardContent Class="px-4">
                                <MudGrid Justify="Justify.SpaceBetween">
                                    <MudItem xs="12" sm="4">
                                        <MudText Typo="Typo.h6" Align="Align.Center">Ordre detaljer:</MudText>
                                        <MudPaper Class="p-2">
                                            <MudText Typo="Typo.body1"><strong>Navn:</strong> @context.FirstName @context.LastName </MudText>
                                            <MudText Typo="Typo.body1"><strong>Email:</strong> @context.Email </MudText>
                                            <MudText Typo="Typo.body1"><strong>Telefon:</strong> @context.PhoneNumber</MudText>
                                            <MudText Typo="Typo.body1"><strong>Pris:</strong> @context.Price kr.</MudText>
                                            <MudText Typo="Typo.body1"><strong>Kommentar:</strong> @context.Comment</MudText>
                                            <div class="p-2 d-flex justify-space-between">
                                                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.History" 
                                                 Size="Size.Small" OnClick="() => OrderChangelog(context)">
                                                    Historik
                                                </MudButton>
                                                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Delete"
                                                 Size="Size.Small" OnClick="() => OrderDelete(context)">
                                                    Slet
                                                </MudButton>
                                            </div>
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="12" sm="8">
                                        <MudText Typo="Typo.h6" Align="Align.Center">
                                            Ordre indhold:
                                        </MudText>
                                        <MudPaper Class="p-2">
                                            <CartOrderComp Order="context"/>
                                        </MudPaper>
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                        </MudCard>
                    </td>
                </MudTr>
            }
        </ChildRowContent>
    </MudTable>
    </Authorized>
    <NotAuthorized>
        <LoginDisplay />
    </NotAuthorized>
</AuthorizeView>
@code
{
    [Inject] private IDialogService DialogService { get; set; }
    private List<Order> oldOrders;
    private string searchString = "";
    private bool FilterFunc1(Order element) => FilterFunc(element, searchString);
    private bool showDelivered = true, showDeclined = true, showCancelled = true;

    //Expired Order Inforamtion that should be deleted
    private List<Order> delOrders;
    private Order expOrder;

    protected override async Task OnInitializedAsync()
    {
        using (var ctx = DbContextFactory.CreateDbContext())
        {
            oldOrders = await ctx.Orders
                                 .Where(o => o.Status >= OrderStatus.Afhentet)
                                 .OrderBy(t => t.DateOrdered)
                                 .ToListAsync();
        }

        //Delete expired order information
        using (var ctx = DbContextFactory.CreateDbContext())
        {
            DateTime now = DateTime.Now;
            delOrders = await ctx.Orders
                .Where(d => d.DateOrdered.AddDays(120) < now)
                .ToListAsync();

            foreach (Order expired in oldOrders)
            {
                expOrder = await ctx.Orders.SingleAsync(p => p.OrderId == expired.OrderId);
                Order dbExpOrder = ctx.Orders.Update(expOrder).Entity;
                dbExpOrder.StripInformation();
                await ctx.SaveChangesAsync();
            }
        }
    }

    private void ShowBtnPress(int nr)
    {
        Order tmpPerson = oldOrders.First(f => f.OrderId == nr);
        tmpPerson.ShowDetails = !tmpPerson.ShowDetails;
    }

    private bool FilterFunc(Order element, string searchString)
    {
        if ((showDelivered && element.Status == OrderStatus.Afhentet) ||
            (showCancelled && element.Status == OrderStatus.Annulleret) ||
            (showDeclined && element.Status == OrderStatus.Afslået))
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{element.OrderId} {element.PhoneNumber} {element.Price}".Contains(searchString))
                return true;

            foreach (GiftBasket giftBasket in element.GiftBaskets)
            {
                if (giftBasket.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                {
                    return true;
                }
            }
        }
        return false;
    }

    private void OrderChangelog(Order o)
    {
        NavMan.NavigateTo($"/order/changelog/{o.OrderId}");
    }

    private async Task OrderDelete(Order o)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Bekræft sletning af ordre",
            $"Er du sikker på du vil slette ordre nr. {o.OrderId}?",
            yesText:"Ja", noText:"Nej"
        );
        if(result == true) {
            using (var ctx = DbContextFactory.CreateDbContext())
            {
                oldOrders.Remove(o);
                ctx.Orders.Remove(o);
                await ctx.SaveChangesAsync();
            }
        }
    }
}
