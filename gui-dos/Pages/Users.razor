@page "/admin/users"

@using System
@using System.IO
@using System.Collections.Generic
@using gui_dos.Models
@using gui_dos.Forms
@using gui_dos.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@using gui_dos.Areas.Identity;
@using Microsoft.AspNetCore.Identity;

@inject UserManager<IdentityUser> UserManager

<AuthorizeView Roles="superuser">
    <Authorized>
        <MudText Style="font-size:30px">Nuværende brugere
        </MudText>
        <div class="d-flex justify-center flex-wrap">
            @foreach (var user in _Users)
            {
                <MudCard Class="ma-4" Outlined="true">
                    <MudCardContent>
                        <MudText Typo="Typo.h4">@user.UserName</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" @onclick="() => _DeleteUser(user)">Delete</MudButton>
                    </MudCardActions>
                </MudCard>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <LoginDisplay />
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    List<IdentityUser> _Users = new();

    protected override async Task OnInitializedAsync()
    {
        string name = (await authenticationStateTask).User.Identity.Name;
        _Users = UserManager.Users
                            .Where(u => u.UserName != name)
                            .ToList();
    }

    private async void _DeleteUser(IdentityUser user)
    {
        await UserManager.DeleteAsync(user);
        _Users.Remove(user);
    }
}
