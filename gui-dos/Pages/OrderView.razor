@page "/order-show"

@using System.Collections.Generic
@using gui_dos.Data
@using gui_dos.Models
@using Microsoft.EntityFrameworkCore;

@inject IDbContextFactory<IsvaerftetDbContext> DbContextFactory


@if (orders != null && orders.Count == 0)
{
    <div>
        No products found...
    </div>
}

@if (orders != null)
{
    @foreach (var order in orders)
    {
        
        <div>
            <div>
                
            </div>
            <div>
                <button @onclick="() => OrderChangeStatus(order, OrderStatus.Pending)">Pending</button>
                <button @onclick="() => OrderChangeStatus(order, OrderStatus.Accepted)">Accepted</button>
                <button @onclick="() => OrderChangeStatus(order, OrderStatus.Finished)">Finnished</button>
                <button @onclick="() => OrderChangeStatus(order, OrderStatus.Delivered)">Delivered</button>
            </div>
        </div>
    }
}
@code
{
    private List<Order> orders;

    protected override async Task OnInitializedAsync()
    {
        using (var ctx = DbContextFactory.CreateDbContext())
        {
            orders = await ctx.Orders.ToListAsync();
        }
    }

    private async Task OrderChangeStatus(Order o, OrderStatus s)
    {
        using (var ctx = DbContextFactory.CreateDbContext())
        {
            Order thisOrder = ctx.Update(o).Entity;
            thisOrder.Status = s;
            await ctx.SaveChangesAsync();
            orders = await ctx.Orders.ToListAsync();
        }
    }
}