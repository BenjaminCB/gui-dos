@page "/gavekurv"

@using gui_dos.Data
@using System.Collections.Generic


<body>
    <section id="product-page-wrapper">

        <section id="filter">
            <h2 class="title_Header">Filter</h2>
            <h3 class="sub_Header">Pris</h3>
            <div class="Price_Range">
                <RadzenSlider Range="true" @bind-Value=@values TValue="IEnumerable<int>" Change=@(args => OnChange(args, "Range Slider")) />
                <p class="price_One"> @JoinVal1 </p>
                <p class="price_Two"> @JoinVal2</p>
            </div>
            <br />
            <h3 class="sub_Header">Præferencer</h3>
            <div class="Preferences">
                <form>
                    <input type="checkbox" id="checkbox1" />
                    <label for="checkbox1">Sæson-</label>
                </form>
            </div>
        </section>
        <center>
            <h1 style="color: green;">PlsWork</h1>
            <ul class="flex-container wrap">
                @foreach (var item in Products)
                {
                    @if (item.Price > 10)
                {
                        <!-- Sum of SM col exceeds 12 so if the screen
            is small (less than 576px) the last column
            will Automatically get aligned in the next row -->
                        <li>
                            <div class="flex-item" style="background-image: url('https://i.insider.com/59ca65fefca6e427008b4776?width=700'); width: 100px; height:100px;">
                                <div class="flex-body">
                                    <h5 class="flex-body-title">@item.Title</h5>
                                    <h5 class="flex-body-price">@item.Price</h5>
                                </div>
                            </div>
                        </li>
                }
                }
            </ul>
        </center>

    </section>

</body>

@code {
    // https://blazor.radzen.com/slider
    static int start = 14;
    static int end = 78;
    IEnumerable<int> values = new int[] { start, end };
    IEnumerable<int> negativeValues = new int[] { -100, 100 };
    //int value = 67;
    //int negativeValue = 0;
    //int valueWithStep = 30;
    string[] Val;
    string JoinVal1 = $"{start},-";
    string JoinVal2 = $"{end},-";
    static int i = 0;
    public static object AddOne()
    {
        i++;
        return null;
    }

    void OnChange(dynamic value, string name)
    {
        var str = value is IEnumerable<int> ? string.Join(", ", value) : value;
        Val = str.Split(",");
        JoinVal1 = $"{Val[0]},-";
        JoinVal2 = $"{Val[1]},-";
    }

    public class Product
    {
        public int ProductId { get; set; }
        public int Price { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public string Image { get; set; }

        public Product(int id, int price, string Title, string D, string I) {
            this.ProductId = id;
            this.Title = Title;
            this.Description = D;
            this.Image = I;
        }

        public Product()
        {
        }
    }
    public class Content
    {
        public string content = "";
    }

    static Product a = new Product { ProductId = 1, Price = 1, Title = "a", Description = "b", Image = "c" };
    static Product b = new Product (1, 20, "b", "b", "c");
    static Product c = new Product (2, 300, "c", "b", "c");
    static Product d = new Product { ProductId = 1, Price = 1, Title = "aa", Description = "b", Image = "c" };
    static Product e = new Product(1, 20, "bb", "b", "c");
    static Product f = new Product(2, 300, "cc", "b", "c");
    static Product g = new Product { ProductId = 1, Price = 1, Title = "aaa", Description = "b", Image = "c" };
    static Product h = new Product(1, 20, "bbb", "b", "c");
    static Product j = new Product(1, 300, "ccc", "b", "c");

    public static List<Product> Products = new List<Product>{a, b, c, d, e, f, g, h, j };
    public static List<Content> Conten = new List<Content> {};


}