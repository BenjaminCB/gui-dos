@page "/product/edit/{productId}"

@using gui_dos.Data
@using gui_dos.Forms
@using Microsoft.EntityFrameworkCore;

@inject IDbContextFactory<IsvaerftetDbContext> DbContextFactory
@inject NavigationManager NavMan

<h1 class="header">Produkt-Id er @ProductId</h1>

@if (product == null)
{
    <div>
        Loading...
    </div>
}
else
{
<body>

    <EditForm Model="@productForm" OnValidSubmit="@editProduct">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group product-title">
            <label for="Title" class="title">Titel</label>
            <InputText @bind-Value=productForm.Title />
        </div>
        <div class="form-group product-description">
            <label for="Description" class="title">Beskrivelse</label>
            <div class="description-box">
                <InputTextArea @bind-Value=productForm.Description />
            </div>
        </div>
            <div class="form-group product-price">
                <label for="Price" class="title">Pris</label>
                <InputNumber @bind-Value=productForm.Price />
            </div>
         <div class="form-group product-image">
            <label for="Image" class="title">Billede(r)</label>
            <InputFile OnChange="@fileUpload" />
         </div>
         <button type="submit">Submit</button>
</EditForm>

</body>
}

@code {
    [Parameter]
    public string ProductId { get; set; }

    private Product product;
    private ProductForm productForm = new ProductForm();

    protected override async Task OnInitializedAsync()
    {
        using (var ctx = DbContextFactory.CreateDbContext())
        {
            int id = Int32.Parse(ProductId);
            product = await ctx.Products.SingleAsync(p => p.ProductId == id);
        }

        productForm.Title = product.Title;
        productForm.Description = product.Description;
        productForm.Price = product.Price;
        productForm.Image = product.Image;
    }

    private async Task fileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        productForm.Image = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task editProduct()
    {
        using (var ctx = DbContextFactory.CreateDbContext())
        {
            ctx.Products.Remove(product);
            ctx.Products.Add(new Product( productForm.Title
                                        , productForm.Description
                                        , productForm.Price
                                        , productForm.Image ));
            await ctx.SaveChangesAsync();
        }
        NavMan.NavigateTo("/product/show");
    }
}
