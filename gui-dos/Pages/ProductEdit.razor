@page "/product/edit/{productId}"

@using gui_dos.Data
@using gui_dos.Forms
@using Microsoft.EntityFrameworkCore;

@inject IDbContextFactory<IsvaerftetDbContext> DbContextFactory
@inject NavigationManager NavMan


<AuthorizeView Context="AuthContext">
    <Authorized>
        <h1>ProductId is @ProductId</h1>
        
        @if (product == null)
        {
            <div>
                Loading...
            </div>
        }
        else
        {
            <EditForm Model="@productForm" OnValidSubmit="@editProduct" Context="EditContext">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
        
                <div class="form-group">
                    <label for="Title">Title</label>
                    <InputText @bind-Value=productForm.Title />
                </div>
                <div class="form-group">
                    <label for="Description">Description</label>
                    <InputTextArea @bind-Value=productForm.Description />
                </div>
                <div class="form-group">
                    <label for="Price">Price</label>
                    <InputNumber @bind-Value=productForm.Price />
                </div>
                <div class="form-group">
                    <label for="Image">Image</label>
                    <InputFile OnChange="@fileUpload" />
                </div>
                <button type="submit">Submit</button>
            </EditForm>
        }
    </Authorized>
    <NotAuthorized>
        <LoginDisplay />
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string ProductId { get; set; }

    private Product product;
    private ProductForm productForm = new ProductForm();

    protected override async Task OnInitializedAsync()
    {
        using (var ctx = DbContextFactory.CreateDbContext())
        {
            int id = Int32.Parse(ProductId);
            product = await ctx.Products.SingleAsync(p => p.ProductId == id);
        }

        productForm.Title = product.Title;
        productForm.Description = product.Description;
        productForm.Price = product.Price;
        productForm.Image = product.Image;
        productForm.Tags = product.Tags;
    }

    private async Task fileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        productForm.Image = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task editProduct()
    {
        using (var ctx = DbContextFactory.CreateDbContext())
        {
            // TODO update this to simpler syntax
            ctx.Products.Remove(product);
            ctx.Products.Add(new Product( productForm.Title
                                        , productForm.Description
                                        , (int) (productForm.Price * 100)
                                        , productForm.Image
                                        , productForm.Tags ));
            await ctx.SaveChangesAsync();
        }
        NavMan.NavigateTo("/product/show");
    }
}
