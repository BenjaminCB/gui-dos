@page "/product/edit/{productId}"

@using gui_dos.Data
@using gui_dos.Forms
@using Microsoft.EntityFrameworkCore;

@inject IDbContextFactory<IsvaerftetDbContext> DbContextFactory
@inject NavigationManager NavMan


<AuthorizeView Context="AuthContext">
    <Authorized>
        <h1>ProductId is @ProductId</h1>

        @if (product == null)
        {
            <div>
                Loading...
            </div>
        }
        else
        {
            <body class="page-wrapper">
                <EditForm Model="@productForm" OnValidSubmit="@editProduct" Context="EditContext">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>

                    <div class="form-group product-title">
                        <label for="Title" class="title">Title</label>
                        <InputText @bind-Value=productForm.Title />
                    </div>
                    <div class="form-group product-description">
                        <label for="Description" class="title">Description</label>
                        <InputTextArea @bind-Value=productForm.Description />
                    </div>
                    <div class="form-group product-price">
                        <label for="Price" class="title">Price</label>
                        <InputNumber @bind-Value=productForm.Price />
                    </div>
                    <div class="form-group product-image">
                        <label for="Image" class="title">Image</label>
                        <InputFile OnChange="@fileUpload" />
                    </div>
                    <div class="form-group product-tags">
                        <label for="Tags" class="title">Tags:</label>
                        <InputTextArea @bind-Value=productForm.Tags />
                    </div>
                    <button type="submit" class="buttons">Submit</button>
                </EditForm>
            </body>
        }
    </Authorized>
    <NotAuthorized>
        <LoginDisplay />
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string ProductId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private Product product;
    private ProductForm productForm = new ProductForm();

    protected override async Task OnInitializedAsync()
    {
        using (var ctx = DbContextFactory.CreateDbContext())
        {
            int id = Int32.Parse(ProductId);
            product = await ctx.Products.SingleAsync(p => p.ProductId == id);
        }

        productForm.Title = product.Title;
        productForm.Description = product.Description;
        productForm.Price = product.Price;
        productForm.Image = product.Image;
        productForm.Tags = product.Tags;
    }

    private async Task fileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        productForm.Image = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task editProduct()
    {
        string name = (await authenticationStateTask).User.Identity.Name;
        using (var ctx = DbContextFactory.CreateDbContext())
        {
            // TODO update this to simpler syntax
            Product p = ctx.Products.Update(product).Entity;

            List<string> changes = new List<string>();
            if (p.Title != productForm.Title)
            {
                p.Title = productForm.Title;
                changes.Add("Title");
            }

            if (p.Description != productForm.Description)
            {
                p.Description = productForm.Description;
                changes.Add("Description");
            }

            if (p.Price != (int) (productForm.Price * 100))
            {
                p.Price = (int) (productForm.Price * 100);
                changes.Add("Price");
            }

            if (p.Image != productForm.Image)
            {
                p.Image = productForm.Image;
                changes.Add("Image");
            }

            if (p.Tags != productForm.Tags)
            {
                p.Tags = productForm.Tags;
                changes.Add("Tags");
            }

            string changeString = $"Product updated [{String.Join(',', changes)}]";

            Change c = new Change()
            {
                ChangeString = changeString,
                Name = name,
                Date = DateTime.Now.ToString()
            };

            p.Changelog.Add(c);

            await ctx.SaveChangesAsync();

            // Earlier version
            /* ctx.Products.Remove(product); */
            /* ctx.Products.Add(new Product( productForm.Title */
            /*                             , productForm.Description */
            /*                             , (int) (productForm.Price * 100) */
            /*                             , productForm.Image */
            /*                             , productForm.Tags )); */
        }
        NavMan.NavigateTo("/product/show");
    }
}
