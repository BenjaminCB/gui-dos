@page "/orderhistory"

@using System.Collections.Generic
@using gui_dos.Data
@using Microsoft.EntityFrameworkCore;

@inject IDbContextFactory<IsvaerftetDbContext> DbContextFactory
@inject NavigationManager NavMan

<h1>Orders</h1>
<p>
    This is all the old orders that have been completed.
</p>

@if (oldOrders == null)
{
    <div>
        Loading...
    </div>
}

@if (oldOrders != null && oldOrders.Count == 0)
{
    <div>
        No orders found...
    </div>
}

@if (oldOrders != null)
{
    @foreach (Order order in oldOrders)
    {
        <div>
            <p>
                Date ordered: @order.DateOrdered.ToString()
                Deadline: @order.DateDeadline.ToString()
                Name: @order.FirstName @order.LastName
                Price: @order.Price
            </p>

            
            @if (orderIsShown && orderToShow.Equals(order))
            {
                <p>
                    Mail: @order.Email
                    Tlf. nr: @order.PhoneNumber
                    Comment: @order.Comment
                </p>
                <div>
                    @foreach (GiftBasket giftBasket in order.GiftBaskets)
                    {
                        <div>
                            <p>
                                Giftbasket: Det er i benjamins kode, implementer senerer.
                                Comment: @giftBasket.Comment
                                Price: @giftBasket.Price
                            </p>
                        </div>
                    }
                </div>
    }
    @if (!orderIsShown || !orderToShow.Equals(order))
    {
        <button @onclick="() => showOrder(order)">
            Show order
        </button>
    }
    else
    {
        <button @onclick="() => hideOrder(order)">
            Hide order
        </button>
    }


</div>
    }
}


@code
{
    private List<Order> oldOrders;
    private bool orderIsShown = false;
    private Order orderToShow;

    protected override async Task OnInitializedAsync()
    {
        using (var ctx = DbContextFactory.CreateDbContext())
        {
            oldOrders = await ctx.Orders.Where(t => t.Status == OrderStatus.Delivered).ToListAsync();
        }
    }



    private void showOrder(Order o)
    {
        orderToShow = o;
        orderIsShown = true;
    }

    private void hideOrder(Order o)
    {
        orderIsShown = false;
    }

}
