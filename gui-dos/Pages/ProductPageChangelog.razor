@page "/product/changelog/{ProductId}"

@using gui_dos.Data
@using System.Collections.Generic
@using Microsoft.EntityFrameworkCore;

@inject IDbContextFactory<IsvaerftetDbContext> DbContextFactory

<AuthorizeView Context="AuthContext">
    <Authorized>  
        @if (changelog == null)
        {
            <div class="text-center m-3">
                <MudText Align="Align.Center" Typo="Typo.h6" Class="m-2">
                    Intet produkt med id: @ProductId
                </MudText>
                <MudButton Color="Color.Primary" StartIcon="@Icons.Filled.ArrowBack" Link="/product"
                Variant="Variant.Filled" Class="rounded-pill border border-dark">
                    Tilbage
                </MudButton> 
            </div>  
        }
        else
        {
            <div class="text-center m-3">
                <MudText Align="Align.Center" Typo="Typo.h5" Class="m-2">
                    Ændringshistorik af "@product.Title"
                </MudText>
                <MudButton Color="Color.Primary" StartIcon="@Icons.Filled.ArrowBack" Link="/product" 
                Variant="Variant.Filled" Class="rounded-pill border border-dark">
                    Tilbage
                </MudButton> 
            </div>   
            <MudTable Items=@changelog Hover="true" Class="border border-dark m-2">
                <HeaderContent>
                    <MudTh Style="width:60%">Ændring:</MudTh>
                    <MudTh Style="width:20%">Af:</MudTh>
                    <MudTh Style="width:20%">Dato:</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Ændring:">@context.ChangeString</MudTd>
                    <MudTd DataLabel="Af:">@context.Name</MudTd>
                    <MudTd DataLabel="Dato:">@context.Date</MudTd>
                </RowTemplate>
            </MudTable>
        }
    </Authorized>
    <NotAuthorized>
        <LoginDisplay />
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string ProductId { get; set; }

    private Product product;
    
    private List<Change> changelog;

    protected override async Task OnInitializedAsync()
    {
        using (var ctx = DbContextFactory.CreateDbContext())
        {
            int id = Int32.Parse(ProductId);
            product = await ctx.Products.SingleOrDefaultAsync(p => p.ProductId == id);
            if(product != null) {
                changelog = product.Changelog;
                changelog.Reverse();
            }
        }
    }
}
