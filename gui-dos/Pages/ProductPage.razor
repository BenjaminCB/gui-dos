@page "/product"

@using System.Collections.Generic
@using System.Linq
@using gui_dos.Data
@using Microsoft.EntityFrameworkCore;

@inject IDbContextFactory<IsvaerftetDbContext> DbContextFactory
@inject NavigationManager NavMan

<AuthorizeView>
    <Authorized>
        <div class="text-center">
            <MudText Typo="Typo.h4">Produkter</MudText>
            <MudButton Color="Color.Primary" StartIcon="@Icons.Filled.Add" Variant="Variant.Filled" Class="rounded-pill border border-dark" OnClick="productInsert">
                Nyt produkt
            </MudButton>
        </div>
        
        @if (products == null)
        {
            <MudText Typo="Typo.h5">Indlæser produkter fra databasen</MudText>
        }

        @if (products != null && products.Count == 0)
        {
            <MudText Typo="Typo.h5">Ingen produkter i databasen</MudText>
        }

        @if (products != null)
        {
            <div class="d-flex justify-center flex-wrap">
                @foreach (var product in products)
                {
                    <div class="d-flex flex-column m-2 mud-secondary rounded border border-dark">
                        <ProductComp Product="@product" ShopView="false"/>
                        <div class="d-flex justify-space-between m-3 mt-auto">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="rounded-pill border border-dark" OnClick="() => productEdit(product)">
                                Rediger
                            </MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="rounded-pill border border-dark" OnClick="() => productChangelog(product)">
                                Historik
                            </MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="rounded-pill border border-dark" OnClick="() => productDelete(product)">
                                Slet
                            </MudButton>
                        </div>
                    </div>
                }
            </div>
        }

    </Authorized>
    <NotAuthorized>
        <LoginDisplay />
    </NotAuthorized>
</AuthorizeView>

@code
{
    private List<Product> products;

    [Inject] private IDialogService DialogService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using (var ctx = DbContextFactory.CreateDbContext())
        {
            products = await ctx.Products.ToListAsync();
            products = new List<Product>(products.OrderBy(x => x.Price));
        }
    }

    private void productInsert() {
        NavMan.NavigateTo("/product/insert");
    }

    private async Task productDelete(Product p)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Bekræft sletning af produkt",
            "Er du sikker på du vil slette dette produkt?",
            yesText: "Ja", noText: "Nej");

        using (var ctx = DbContextFactory.CreateDbContext())
        {

            if(result == true) {
                ctx.Products.Remove(p);
                await ctx.SaveChangesAsync();
                products = await ctx.Products.ToListAsync();
            }
        }
    }

    private void productEdit(Product p)
    {
        NavMan.NavigateTo($"/product/edit/{p.ProductId}");
    }

    private void productChangelog(Product p)
    {
        NavMan.NavigateTo($"/product/changelog/{p.ProductId}");
    }
}
